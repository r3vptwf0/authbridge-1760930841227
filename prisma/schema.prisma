generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  username      String          @unique
  password      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  expenses      Expense[]
  incomes       Income[]
  products      Product[]
  debts         Debt[]
  workHours     WorkHours[]
  calendarEvents CalendarEvent[]
  tasks         Task[]

  @@map("users")
}

model Expense {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  description String
  amount      Float
  category    String
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("expenses")
}

model Income {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  description String
  amount      Float
  category    String
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("incomes")
}

model Product {
  id           String   @id @default(uuid())
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  stockGrams   Float
  costPerGram  Float
  pricePerGram Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("products")
}

model Debt {
  id          String   @id @default(uuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  personName  String
  amount      Float
  amountPaid  Float    @default(0)
  description String?
  dueDate     DateTime?
  status      String   @default("pending")
  type        String   @default("to_others")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("debts")
}

model WorkHours {
  id        String    @id @default(uuid())
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clockIn   DateTime
  clockOut  DateTime?
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("work_hours")
}

model CalendarEvent {
  id          String   @id @default(uuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  date        DateTime
  isReminder  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("calendar_events")
}

model Task {
  id          String   @id @default(uuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  date        DateTime @default(now())
  completed   Boolean  @default(false)
  hour        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tasks")
}

model Consumption {
  id          String   @id @default(uuid())
  userId      String?
  productId   String
  productName String
  quantity    Float
  costValue   Float
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("consumptions")
}
